<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000f5c30d11fa51ac4214562f363580c664449245f1dfa65fba8a092dea4cfefdeed2a5a834bdc25cc3809d1dfcbfd7b2ea78818e62e4bfa748d0c2249c8a48eacb35bb5762ebd5c75b50ca2396390bb5cfa597df6dd77c8506cca47359b6e0112e17f20ab9de9f8b7ef26c78c0dca9c3a1d4937254150b7a2932ab1116ac0c7cac" isAbstract="false" kind="Synchronizer" name="VerifyDataPortSWC2Impl" packagePath="br.ufc.mdcc.hpc.shelf.tactical.environment.impl">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000d31e36128cc7e3bdd793860ee8940d25d4d9177b0ca41e9e841e4177a4845dd2fbfcba7e7d9dad5900e1fd110a3e754817f621fa0849cb81bd0ff15d8b1b542b71a7a1dc45bb5b0614d705f16c03271b0618a8461a52e9e98daa085e49c320cfa7432aad9609b24a1488a45e62406400c380975c51d48ab7b69ac7836b976fb2" localRef="base" location="br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortSWC2/VerifyDataPortSWC2.hpe" name="VerifyDataPortSWC2" package="br.ufc.mdcc.hpc.shelf.tactical.environment" version="1.0.0.0">
        <visualDescription h="60" w="100" x="197" y="97">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="server_port_type" varName="S"/>
        <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="false" uRef="client">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
        <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="false" uRef="server">
          <visualDescription h="20" w="20" x="28" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
    <facet_configuration facet="0" multiple="false"/>
  </header>
  <componentInfo>
    <parameter componentRef="verify_data_port_server" formFieldId="verify_data_port_server" order="0" variance="contravariant" varName="?"/>
    <innerComponent localRef="verify_data_port_server" location="br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerTypeSWC2/VerifyDataPortServerTypeSWC2.hpe" multiple="false" name="VerifyDataPortServerTypeSWC2" package="br.ufc.mdcc.hpc.shelf.tactical.environment" parameter_id="verify_data_port_server" exposed="false">
      <visualDescription h="60" w="100" x="276" y="453">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="true" uRef="environment_port_type">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent localRef="verify_data_port_server_type_swc2" location="br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerTypeSWC2/VerifyDataPortServerTypeSWC2.hpe" multiple="false" name="VerifyDataPortServerTypeSWC2" package="br.ufc.mdcc.hpc.shelf.tactical.environment" exposed="false">
      <visualDescription h="60" w="262" x="291" y="393">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="true" uRef="environment_port_type">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="verify_data_port_server_type_swc2" direct="true" varName="S"/>
    <interface iRef="IVerifyClientPortSWC2Impl" nArgs="0">
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort;&#xA;using br.ufc.mdcc.hpc.storm.binding.channel.Binding;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortClientTypeSWC2;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortSWC2;&#xA;&#xA;namespace br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortSWC2Impl &#xA;{&#xA;&#xA;&#x9;public abstract class BaseIVerifyClientPortSWC2Impl: Synchronizer, BaseIVerifyClientPortSWC2&#xA;&#x9;{&#xA;&#x9;&#x9;protected const int FACET_CLIENT = 0;&#xA;&#x9;&#x9;protected const int FACET_SERVER = 1;&#xA;&#xA;&#x9;&#x9;private IChannel channel = null;&#xA;&#x9;&#x9;protected IChannel Channel&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.channel == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.channel = (IChannel) Services.getPort(&quot;channel&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.channel;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;}&#xA;}" name="BaseIVerifyClientPortSWC2Impl.cs" srcType="base" uri="br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortSWC2Impl/bin/1.0.0.0/BaseIVerifyClientPortSWC2Impl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType/bin/1.0.0.0/IEnvironmentPortType.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort/bin/1.0.0.0/BaseIVerifyClientPort.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortClientTypeSWC2;&#xA;using System.Collections.Generic;&#xA;using br.ufc.mdcc.hpc.storm.binding.channel.Binding;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortSWC2;&#xA;&#xA;&#xA;namespace br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortSWC2Impl&#xA;{&#xA;&#x9;public class IVerifyClientPortSWC2Impl: BaseIVerifyClientPortSWC2Impl, IVerifyClientPortSWC2&#xA;&#x9;{ &#xA;&#x9;&#x9;public override void main()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;}&#xA;&#x9;&#xA;&#x9;&#x9;public override void after_initialize ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Channel.TraceFlag = true;&#xA;&#xA;&#x9;&#x9;&#x9;foreach (KeyValuePair&lt;int,IDictionary&lt;string,int>> t in this.UnitSizeInFacet)&#xA;&#x9;&#x9;&#x9;&#x9;foreach (KeyValuePair&lt;string,int> u in t.Value)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;SIZE OF UNIT {1} in FACET {0} is {2}&quot;, t.Key, u.Key, u.Value);&#x9;&#x9;&#x9;;&#xA;&#xA;&#x9;&#x9;&#x9;int server_size = this.UnitSizeInFacet[this.FacetIndexes [FACET_SERVER] [0]][&quot;server&quot;];&#xA;&#xA;&#x9;&#x9;&#x9;this.client = new IVerifyDataPortClientTypeSWC2Impl (server_size, Channel);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private IVerifyDataPortClientTypeSWC2 client = null;&#xA;&#x9;&#x9;public IVerifyDataPortClientTypeSWC2 Client { get {&#x9;return client; } }&#xA;&#xA;&#x9;&#x9;internal class IVerifyDataPortClientTypeSWC2Impl : IVerifyDataPortClientTypeSWC2&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;public int  operation_tag = 1 ;&#xA;&#xA;&#x9;&#x9;&#x9;public int dataCertifierTactical = 71; &#xA;&#xA;&#x9;&#x9;&#x9;//SWC2&#xA;&#x9;&#x9;&#x9;public int number_units_tactical;&#xA;&#x9;&#x9;&#x9;public int [] number_properties_per_unit_tactical;&#xA;&#x9;&#x9;&#x9;public int slice_size;&#xA;&#x9;&#x9;&#x9;public int[] properties_status;&#xA;&#x9;&#x9;&#x9;public int []index_first_prop_tact;&#xA;&#x9;&#x9;&#x9;public int num_properties;&#xA;&#x9;&#x9;&#x9;public string [] property_files;&#xA;&#xA;&#x9;&#x9;&#x9;int num_properties_aux;&#xA;&#x9;&#x9;&#x9;int number_prop_read;&#xA;&#x9;&#x9;&#x9;string[] arr ;&#xA;&#xA;&#x9;&#x9;&#x9;private IChannel channel;&#xA;&#x9;&#x9;&#x9;private IChannel Channel { get { return channel; } }&#xA;&#x9;&#x9;&#x9;private int server_size = 0;&#xA;&#x9;&#x9;&#x9;//SWC2&#xA;&#xA;&#x9;&#x9;&#x9;public IVerifyDataPortClientTypeSWC2Impl(int server_size, IChannel channel)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;this.server_size = server_size;&#xA;&#x9;&#x9;&#x9;&#x9;this.channel = channel;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;public void setNumProperties(int numProperties)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;ENTER IVerifyClientPortSWC2Impl - setNumProperties&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;this.num_properties = numProperties;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;number_units_tactical = server_size;&#xA;&#x9;&#x9;&#x9;&#x9;number_properties_per_unit_tactical = new int[number_units_tactical];&#xA;&#x9;&#x9;&#x9;&#x9;slice_size = (int) Math.Floor ((double)num_properties / number_units_tactical);&#xA;&#x9;&#x9;&#x9;&#x9;num_properties_aux = num_properties;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;for (int i = 0; i &lt; number_units_tactical; i++) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;number_properties_per_unit_tactical [i] = slice_size;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;num_properties_aux -= slice_size;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;int index=0;&#xA;&#x9;&#x9;&#x9;&#x9;for (int i = 0; i &lt; num_properties_aux; i++) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;number_properties_per_unit_tactical [index++] += 1;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (index == number_units_tactical)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;index = 0;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;num_properties_aux = 0;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;arr = new string[slice_size + 1];&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;properties_status = new int[slice_size + 1];&#xA;&#x9;&#x9;&#x9;&#x9;index_first_prop_tact = new int[number_units_tactical];&#xA;&#x9;&#x9;&#x9;&#x9;number_prop_read = 0;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;EXIT VerifyClientPortSWC2Impl - setNumProperties&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;Tuple&lt;int,int> target_server_unit(int u)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;return new Tuple&lt;int, int> (FACET_SERVER, u);&#x9;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;public void setMcrl2File(string mCRL2_file)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;ENTER IVerifyClientPortSWC2Impl - setMcrl2File&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;RequestList reqList = new RequestList ();&#xA;&#x9;&#x9;&#x9;&#x9;for (int s = 0; s &lt; server_size; s++) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Channel.Send&lt;int> (0, target_server_unit (s), operation_tag);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Request req = Channel.ImmediateSyncSend&lt;string> (mCRL2_file, target_server_unit (s), dataCertifierTactical);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reqList.Add (req);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;reqList.WaitAll ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;EXIT IVerifyClientPortSWC2Impl - setMcrl2File&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;public void setPropertyFiles(string [] property_files)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;ENTER IVerifyClientPortSWC2Impl - setPropertyFiles&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;this.property_files = property_files;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;EXIT IVerifyClientPortSWC2Impl - setPropertyFiles&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;public void setNumPropsTacticals()&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;ENTER IVerifyClientPortSWC2Impl - setNumPropsTacticals *** number_units_tactical = {0}&quot;, number_units_tactical);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;RequestList reqList = new RequestList ();&#xA;&#x9;&#x9;&#x9;&#x9;for (int i = 0; i &lt; number_units_tactical; i++) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Channel.Send&lt;int> (1,  target_server_unit (i), operation_tag);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;IVerifyClientPortSWC2Impl - setNumPropsTacticals *** number_properties_per_unit_tactical [{0}] = {1}&quot;, i, number_properties_per_unit_tactical [i]);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Request req = Channel.ImmediateSyncSend&lt;int> (number_properties_per_unit_tactical [i],  target_server_unit (i), dataCertifierTactical);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reqList.Add (req);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;reqList.WaitAll ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;EXIT IVerifyClientPortSWC2Impl - setNumPropsTacticals&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;public void setIndexFirstPropTacticals()&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;ENTER IVerifyClientPortSWC2Impl - setIndexFirstPropTacticals&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;RequestList reqList = new RequestList ();&#xA;&#x9;&#x9;&#x9;&#x9;for (int i = 0; i &lt; number_units_tactical; i++) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Channel.Send&lt;int> (2, target_server_unit (i), operation_tag);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Request req = Channel.ImmediateSyncSend&lt;int> (number_prop_read, target_server_unit (i), dataCertifierTactical);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reqList.Add (req);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;index_first_prop_tact [i] = number_prop_read;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;number_prop_read += number_properties_per_unit_tactical [i];&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;reqList.WaitAll ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;EXIT IVerifyClientPortSWC2Impl - setIndexFirstPropTacticals&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;public void setPropertiesTacticals()&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;ENTER IVerifyClientPortSWC2Impl - setPropertiesTacticals&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;RequestList reqList = new RequestList ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;for (int i = 0; i &lt; number_units_tactical; i++) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Array.Copy (property_files, index_first_prop_tact [i], arr, 0, number_properties_per_unit_tactical [i]);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Channel.Send&lt;int> (3, target_server_unit (i), operation_tag);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Request req = Channel.ImmediateSyncSend&lt;string[]>(arr, target_server_unit (i), dataCertifierTactical);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reqList.Add (req);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;reqList.WaitAll ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;EXIT IVerifyClientPortSWC2Impl - setPropertiesTacticals&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" name="IVerifyClientPortSWC2Impl.cs" srcType="user" uri="br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortSWC2Impl/bin/1.0.0.0/IVerifyClientPortSWC2Impl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortSWC2Impl/bin/1.0.0.0/BaseIVerifyClientPortSWC2Impl.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort/bin/1.0.0.0/IVerifyClientPort.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="175" x="60" y="78">
        <color b="0" g="255" r="255"/>
      </visualDescription>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <interface iRef="IVerifyServerPortSWC2Impl" nArgs="1">
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerTypeSWC2;&#xA;using br.ufc.mdcc.hpc.storm.binding.channel.Binding;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortSWC2;&#xA;&#xA;&#xA;namespace br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortSWC2Impl &#xA;{&#xA;&#x9;public abstract class BaseIVerifyServerPortSWC2Impl&lt;S>: Synchronizer, BaseIVerifyServerPortSWC2&lt;S>&#xA;&#x9;&#x9;where S:IVerifyDataPortServerTypeSWC2&#xA;&#x9;{&#xA;&#x9;&#x9;protected const int FACET_CLIENT = 0;&#xA;&#x9;&#x9;protected const int FACET_SERVER = 1;&#xA;&#xA;&#x9;&#x9;private IChannel channel = null;&#xA;&#x9;&#x9;protected IChannel Channel&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.channel == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.channel = (IChannel) Services.getPort(&quot;channel&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.channel;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseIVerifyServerPortSWC2Impl.cs" srcType="base" uri="br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortSWC2Impl/bin/1.0.0.0/BaseIVerifyServerPortSWC2Impl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType/bin/1.0.0.0/IEnvironmentPortType.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort/bin/1.0.0.0/BaseIVerifyServerPort.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerTypeSWC2;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortSWC2;&#xA;&#xA;&#xA;namespace br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortSWC2Impl&#xA;{&#xA;&#x9;public class IVerifyServerPortSWC2Impl&lt;S> : BaseIVerifyServerPortSWC2Impl&lt;S>, IVerifyServerPortSWC2&lt;S>&#xA;&#x9;&#x9;where S:IVerifyDataPortServerTypeSWC2&#xA;&#x9;{&#xA;&#x9;&#x9;// it is a multicast.&#xA;&#x9;&#x9;public Tuple&lt;int,int> certifier = new Tuple&lt;int,int> (FACET_CLIENT, 0);&#xA;&#x9;&#x9;public int operation, operation_tag = 1 ;&#xA;&#xA;&#x9;&#x9;public int dataCertifierTactical = 71; &#xA;&#xA;&#x9;&#x9;//swc2&#xA;&#x9;&#x9;public string mCRL2_file;&#xA;&#x9;&#x9;public string []property_files; &#xA;&#xA;&#x9;&#x9;public override void main()&#xA;&#x9;&#x9;{  &#xA;&#x9;&#x9;&#x9;Channel.TraceFlag = true;&#xA;&#xA;&#x9;&#x9;&#x9;while (true) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: IVerifyServerPortSWC2Impl - WAITING OPERATION&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;operation = Channel.Receive&lt;int> (certifier, operation_tag);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: IVerifyServerPortSWC2Impl - OPERATION RECEIVED - operation = {0}&quot;, operation);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;switch(operation)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//SWC2&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case 0:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setMcrl2File ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case 1:&#x9;setNumProperties ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case 2:setIndexMyFirstProp ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case 3: setPropertyFiles();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;//swc2&#xA;&#x9;&#x9;public void setMcrl2File()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: ENTER IVerifyServerPortSWC2Impl - setMcrl2File&quot;);&#xA;&#x9;&#x9;&#x9;mCRL2_file = Channel.Receive&lt;string> (certifier, dataCertifierTactical);&#xA;&#x9;&#x9;&#x9;service.setMcrl2File (mCRL2_file);&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: EXIT IVerifyServerPortSWC2Impl - setMcrl2File&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void setNumProperties()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: ENTER IVerifyServerPortSWC2Impl - setNumProperties&quot;);&#xA;&#x9;&#x9;&#x9;service.setNumProperties (Channel.Receive&lt;int> (certifier, dataCertifierTactical));&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: EXIT IVerifyServerPortSWC2Impl - setNumProperties&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void setIndexMyFirstProp()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: ENTER IVerifyServerPortSWC2Impl - setIndexMyFirstProp&quot;);&#xA;&#x9;&#x9;&#x9;service.setIndexMyFirstProp (Channel.Receive&lt;int> (certifier, dataCertifierTactical));&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: EXIT IVerifyServerPortSWC2Impl - setIndexMyFirstProp&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void setPropertyFiles()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: ENTER IVerifyServerPortSWC2Impl - setPropertyFiles&quot;);&#xA;&#x9;&#x9;&#x9;//Channel.Receive&lt;string> (certifier, dataCertifierTactical, ref property_files);&#xA;&#x9;&#x9;&#x9;//service.setPropertyFiles (ref property_files);&#xA;&#x9;&#x9;&#x9;service.setPropertyFiles(Channel.Receive&lt;string[]> (certifier, dataCertifierTactical));&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: EXIT IVerifyServerPortSWC2Impl - setPropertyFiles&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#xA;&#x9;&#x9;private S service = default(S);&#xA;&#x9;&#x9;public S Server { set {&#x9;service = value; } }&#xA;&#x9;}&#xA;}&#xA;" name="IVerifyServerPortSWC2Impl.cs" srcType="user" uri="br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortSWC2Impl/bin/1.0.0.0/IVerifyServerPortSWC2Impl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortSWC2Impl/bin/1.0.0.0/BaseIVerifyServerPortSWC2Impl.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort/bin/1.0.0.0/IVerifyServerPort.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="201" x="341" y="84">
        <color b="0" g="165" r="255"/>
      </visualDescription>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <unit facet="0" iRef="IVerifyClientPortSWC2Impl" multiple="false" private="false" replica="0" uRef="client" visibleInterface="true">
      <super cRef="base" uRef="client"/>
      <visualDescription h="40" w="80" x="43" y="273"/>
    </unit>
    <unit facet="0" iRef="IVerifyServerPortSWC2Impl" multiple="false" private="false" replica="0" uRef="server" visibleInterface="true">
      <super cRef="base" uRef="server"/>
      <visualDescription h="40" w="80" x="362" y="303"/>
    </unit>
  </componentInfo>
</component:component>