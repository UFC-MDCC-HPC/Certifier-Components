<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="00240000048000009400000006020000002400005253413100040000110000000318c00ce6b1bbff34578a12294dd2b57fde188619160b3e7b1385d81188c0c7c46ca4f9ae11d6f517b28528730140832053be4f296d0e82e29f29691c548c5466cee824168befb46db06f6bc6e130c0ab7f80c0cc59a6f232f69b1e11ca04e8d5232ec44508c0a817a0bc49b319abe4884ef978ad120015ffda3db61959aea0" isAbstract="false" kind="Application" name="ParallelCertificationSystemSWC2Impl" packagePath="br.ufc.mdcc.hpc.shelf.certify.impl">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000d376a8673c4422cc9b1ed34d5c1b2efa8b8bbf2c5557e3ffe46799018bcc6d88dcbf188a010329ccfe6594ade039b56c33281ad9b2bcc40b121aba4f866b7f97dace2c9b8321e82f1c3242e1577141b5f30959e988c5ad40bb48f4f03c79f541d5006e71ed5b7e56eabe5ecf63fa20c4083d7da20c4cad59d36c7dcb2d2aada9" localRef="base" location="br.ufc.mdcc.hpc.shelf.certify.ParallelCertificationSystemSWC2/ParallelCertificationSystemSWC2.hpe" name="ParallelCertificationSystemSWC2" package="br.ufc.mdcc.hpc.shelf.certify" version="1.0.0.0">
        <visualDescription h="60" w="119" x="150" y="138">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="true" uRef="root">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
        <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="true" uRef="peer1">
          <visualDescription h="20" w="20" x="28" y="2"/>
        </unitBounds>
        <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="true" uRef="peer2">
          <visualDescription h="20" w="20" x="51" y="2"/>
        </unitBounds>
        <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="true" uRef="peer3">
          <visualDescription h="20" w="20" x="74" y="2"/>
        </unitBounds>
        <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="true" uRef="peer4">
          <visualDescription h="20" w="20" x="97" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
    <facet_configuration facet="0" multiple="false"/>
  </header>
  <componentInfo>
    <interface iRef="IRootImpl" nArgs="0">
      <slice isRef="swc2">
        <originRef cRef="swc2" iRef="ISWC2"/>
        <visualDescription h="10" w="10" x="8" y="10"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortClientType;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.task.VerifyPortType;&#xA;using br.ufc.mdcc.hpc.shelf.certifier.SWC2;&#xA;using br.ufc.mdcc.hpc.shelf.certify.ParallelCertificationSystemSWC2;&#xA;&#xA;namespace br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl &#xA;{&#xA;&#x9;public abstract class BaseIRootImpl: Application, BaseIRoot&#xA;&#x9;{&#xA;&#x9;&#x9;private IVerifyClientPort&lt;IVerifyDataPortClientType> verify_data2 = null;&#xA;&#xA;&#x9;&#x9;protected IVerifyClientPort&lt;IVerifyDataPortClientType> Verify_data2&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.verify_data2 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.verify_data2 = (IVerifyClientPort&lt;IVerifyDataPortClientType>) Services.getPort(&quot;verify_data2&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.verify_data2;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IVerifyClientPort&lt;IVerifyDataPortClientType> verify_data4 = null;&#xA;&#xA;&#x9;&#x9;protected IVerifyClientPort&lt;IVerifyDataPortClientType> Verify_data4&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.verify_data4 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.verify_data4 = (IVerifyClientPort&lt;IVerifyDataPortClientType>) Services.getPort(&quot;verify_data4&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.verify_data4;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IVerifyClientPort&lt;IVerifyDataPortClientType> verify_data1 = null;&#xA;&#xA;&#x9;&#x9;protected IVerifyClientPort&lt;IVerifyDataPortClientType> Verify_data1&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.verify_data1 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.verify_data1 = (IVerifyClientPort&lt;IVerifyDataPortClientType>) Services.getPort(&quot;verify_data1&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.verify_data1;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IVerifyClientPort&lt;IVerifyDataPortClientType> verify_data3 = null;&#xA;&#xA;&#x9;&#x9;protected IVerifyClientPort&lt;IVerifyDataPortClientType> Verify_data3&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.verify_data3 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.verify_data3 = (IVerifyClientPort&lt;IVerifyDataPortClientType>) Services.getPort(&quot;verify_data3&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.verify_data3;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private ITaskPort&lt;IVerifyPortType> verify1 = null;&#xA;&#xA;&#x9;&#x9;protected ITaskPort&lt;IVerifyPortType> Verify1&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.verify1 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.verify1 = (ITaskPort&lt;IVerifyPortType>) Services.getPort(&quot;verify1&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.verify1;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private ITaskPort&lt;IVerifyPortType> verify2 = null;&#xA;&#xA;&#x9;&#x9;protected ITaskPort&lt;IVerifyPortType> Verify2&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.verify2 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.verify2 = (ITaskPort&lt;IVerifyPortType>) Services.getPort(&quot;verify2&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.verify2;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private ITaskPort&lt;IVerifyPortType> verify4 = null;&#xA;&#xA;&#x9;&#x9;protected ITaskPort&lt;IVerifyPortType> Verify4&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.verify4 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.verify4 = (ITaskPort&lt;IVerifyPortType>) Services.getPort(&quot;verify4&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.verify4;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private ITaskPort&lt;IVerifyPortType> verify3 = null;&#xA;&#xA;&#x9;&#x9;protected ITaskPort&lt;IVerifyPortType> Verify3&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.verify3 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.verify3 = (ITaskPort&lt;IVerifyPortType>) Services.getPort(&quot;verify3&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.verify3;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private ISWC2 swc2 = null;&#xA;&#xA;&#x9;&#x9;protected ISWC2 SWC2&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.swc2 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.swc2 = (ISWC2) Services.getPort(&quot;swc2&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.swc2;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseIRootImpl.cs" srcType="base" uri="br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl/bin/1.0.0.0/BaseIRootImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort/bin/1.0.0.0/IVerifyClientPort.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortClientType/bin/1.0.0.0/IVerifyDataPortClientType.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/bin/1.0.0.0/ITaskPort.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.task.VerifyPortType/bin/1.0.0.0/IVerifyPortType.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.certifier.SWC2/bin/1.0.0.0/ISWC2.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.certify.ParallelCertificationSystemSWC2/bin/1.0.0.0/BaseIRootImpl.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.shelf.certify.ParallelCertificationSystemSWC2;&#xA;using br.ufc.mdcc.hpc.shelf.certifier.SWC2;&#xA;&#x9;&#x9;  &#xA;namespace br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl&#xA;{&#xA;&#x9;public class IRootImpl : BaseIRootImpl, IRoot&#xA;&#x9;{&#xA;&#x9;&#x9;public override void main()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;BEGIN ROOT&quot;);&#xA;&#x9;&#x9;&#x9;//SWC2.go ();&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;END ROOT&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" name="IRootImpl.cs" srcType="user" uri="br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl/bin/1.0.0.0/IRootImpl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl/bin/1.0.0.0/BaseIRootImpl.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.certify.ParallelCertificationSystemSWC2/bin/1.0.0.0/IRootImpl.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="133" x="517" y="112">
        <color b="255" g="0" r="0"/>
      </visualDescription>
      <port name="verify_data1">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="verify_data1" sRef="swc2"/>
      </port>
      <port name="verify2">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="verify2" sRef="swc2"/>
      </port>
      <port name="verify3">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="verify3" sRef="swc2"/>
      </port>
      <port name="verify_data3">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="verify_data3" sRef="swc2"/>
      </port>
      <port name="verify_data4">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="verify_data4" sRef="swc2"/>
      </port>
      <port name="verify_data2">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="verify_data2" sRef="swc2"/>
      </port>
      <port name="verify4">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="verify4" sRef="swc2"/>
      </port>
      <port name="verify1">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="verify1" sRef="swc2"/>
      </port>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <interface iRef="IPeer1Impl" nArgs="0">
      <slice isRef="mcrl2_1">
        <originRef cRef="mcrl2_1" iRef="IMCRL2"/>
        <visualDescription h="10" w="10" x="6" y="25"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.task.VerifyPortType;&#xA;using br.ufc.mdcc.hpc.shelf.certify.tactical.MCRL2;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerType;&#xA;using br.ufc.mdcc.hpc.shelf.certify.ParallelCertificationSystemSWC2;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerTypeSWC2;&#xA;&#xA;namespace br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl &#xA;{&#xA;&#x9;public abstract class BaseIPeer1Impl: Application, BaseIPeer1&#xA;&#x9;{&#xA;&#x9;&#x9;private ITaskPort&lt;IVerifyPortType> verify1 = null;&#xA;&#xA;&#x9;&#x9;protected ITaskPort&lt;IVerifyPortType> Verify1&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.verify1 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.verify1 = (ITaskPort&lt;IVerifyPortType>) Services.getPort(&quot;verify1&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.verify1;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IMCRL2&lt;IVerifyDataPortServerTypeSWC2> mcrl2_1 = null;&#xA;&#xA;&#x9;&#x9;protected IMCRL2&lt;IVerifyDataPortServerTypeSWC2> MCRL2_1&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.mcrl2_1 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.mcrl2_1 = (IMCRL2&lt;IVerifyDataPortServerTypeSWC2>) Services.getPort(&quot;mcrl2_1&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.mcrl2_1;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IVerifyServerPort&lt;IVerifyDataPortServerTypeSWC2> verify_data1 = null;&#xA;&#xA;&#x9;&#x9;protected IVerifyServerPort&lt;IVerifyDataPortServerTypeSWC2> Verify_data1&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.verify_data1 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.verify_data1 = (IVerifyServerPort&lt;IVerifyDataPortServerTypeSWC2>) Services.getPort(&quot;verify_data1&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.verify_data1;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseIPeer1Impl.cs" srcType="base" uri="br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl/bin/1.0.0.0/BaseIPeer1Impl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/bin/1.0.0.0/ITaskPort.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.task.VerifyPortType/bin/1.0.0.0/IVerifyPortType.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.certify.tactical.MCRL2/bin/1.0.0.0/IMCRL2.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort/bin/1.0.0.0/IVerifyServerPort.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerType/bin/1.0.0.0/IVerifyDataPortServerType.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.certify.ParallelCertificationSystemSWC2/bin/1.0.0.0/BaseIPeer1Impl.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.shelf.certify.ParallelCertificationSystemSWC2;&#xA;using br.ufc.mdcc.hpc.shelf.certify.tactical.MCRL2;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerTypeSWC2;&#xA;&#xA;namespace br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl&#xA;{&#xA;&#x9;public class IPeer1Impl : BaseIPeer1Impl, IPeer1&#xA;&#x9;{&#xA;&#x9;&#x9;public override void main()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;BEGIN PEER #1&quot;);&#xA;&#x9;&#x9;&#x9;//MCRL2_1.go ();&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;END PEER #1&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" name="IPeer1Impl.cs" srcType="user" uri="br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl/bin/1.0.0.0/IPeer1Impl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl/bin/1.0.0.0/BaseIPeer1Impl.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.certify.ParallelCertificationSystemSWC2/bin/1.0.0.0/IPeer1Impl.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="133" x="517" y="159">
        <color b="0" g="255" r="255"/>
      </visualDescription>
      <port name="verify_data1">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="verify_data" sRef="mcrl2_1"/>
      </port>
      <port name="verify1">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="verify" sRef="mcrl2_1"/>
      </port>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <interface iRef="IPeer2Impl" nArgs="0">
      <slice isRef="mcrl2_2">
        <originRef cRef="mcrl2_2" iRef="IMCRL2"/>
        <visualDescription h="10" w="10" x="13" y="24"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.task.VerifyPortType;&#xA;using br.ufc.mdcc.hpc.shelf.certify.tactical.MCRL2;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerType;&#xA;using br.ufc.mdcc.hpc.shelf.certify.ParallelCertificationSystemSWC2;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerTypeSWC2;&#xA;&#xA;namespace br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl &#xA;{&#xA;&#x9;public abstract class BaseIPeer2Impl: Application, BaseIPeer2&#xA;&#x9;{&#xA;&#x9;&#x9;private ITaskPort&lt;IVerifyPortType> verify2 = null;&#xA;&#xA;&#x9;&#x9;protected ITaskPort&lt;IVerifyPortType> Verify2&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.verify2 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.verify2 = (ITaskPort&lt;IVerifyPortType>) Services.getPort(&quot;verify2&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.verify2;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IMCRL2&lt;IVerifyDataPortServerTypeSWC2> mcrl2_2 = null;&#xA;&#xA;&#x9;&#x9;protected IMCRL2&lt;IVerifyDataPortServerTypeSWC2> MCRL2_2&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.mcrl2_2 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.mcrl2_2 = (IMCRL2&lt;IVerifyDataPortServerTypeSWC2>) Services.getPort(&quot;mcrl2_2&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.mcrl2_2;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IVerifyServerPort&lt;IVerifyDataPortServerTypeSWC2> verify_data2 = null;&#xA;&#xA;&#x9;&#x9;protected IVerifyServerPort&lt;IVerifyDataPortServerTypeSWC2> Verify_data2&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.verify_data2 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.verify_data2 = (IVerifyServerPort&lt;IVerifyDataPortServerTypeSWC2>) Services.getPort(&quot;verify_data2&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.verify_data2;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseIPeer2Impl.cs" srcType="base" uri="br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl/bin/1.0.0.0/BaseIPeer2Impl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/bin/1.0.0.0/ITaskPort.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.task.VerifyPortType/bin/1.0.0.0/IVerifyPortType.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.certify.tactical.MCRL2/bin/1.0.0.0/IMCRL2.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort/bin/1.0.0.0/IVerifyServerPort.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerType/bin/1.0.0.0/IVerifyDataPortServerType.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.certify.ParallelCertificationSystemSWC2/bin/1.0.0.0/BaseIPeer2Impl.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.shelf.certify.ParallelCertificationSystemSWC2;&#xA;using br.ufc.mdcc.hpc.shelf.certify.tactical.MCRL2;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerTypeSWC2;&#xA;&#xA;namespace br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl&#xA;{&#xA;&#x9;public class IPeer2Impl : BaseIPeer2Impl, IPeer2&#xA;&#x9;{&#xA;&#x9;&#x9;public override void main()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;BEGIN PEER #2&quot;);&#xA;&#x9;&#x9;&#x9;//MCRL2_2.go ();&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;END PEER #2&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" name="IPeer2Impl.cs" srcType="user" uri="br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl/bin/1.0.0.0/IPeer2Impl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl/bin/1.0.0.0/BaseIPeer2Impl.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.certify.ParallelCertificationSystemSWC2/bin/1.0.0.0/IPeer2Impl.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="132" x="517" y="210">
        <color b="0" g="255" r="255"/>
      </visualDescription>
      <port name="verify2">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="verify" sRef="mcrl2_2"/>
      </port>
      <port name="verify_data2">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="verify_data" sRef="mcrl2_2"/>
      </port>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <interface iRef="IPeer3Impl" nArgs="0">
      <slice isRef="mcrl2_3">
        <originRef cRef="mcrl2_3" iRef="IMCRL2"/>
        <visualDescription h="10" w="10" x="14" y="17"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.task.VerifyPortType;&#xA;using br.ufc.mdcc.hpc.shelf.certify.tactical.MCRL2;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerType;&#xA;using br.ufc.mdcc.hpc.shelf.certify.ParallelCertificationSystemSWC2;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerTypeSWC2;&#xA;&#xA;namespace br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl &#xA;{&#xA;&#x9;public abstract class BaseIPeer3Impl: Application, BaseIPeer3&#xA;&#x9;{&#xA;&#x9;&#x9;private ITaskPort&lt;IVerifyPortType> verify3 = null;&#xA;&#xA;&#x9;&#x9;protected ITaskPort&lt;IVerifyPortType> Verify3&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.verify3 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.verify3 = (ITaskPort&lt;IVerifyPortType>) Services.getPort(&quot;verify3&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.verify3;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IMCRL2&lt;IVerifyDataPortServerTypeSWC2> mcrl2_3 = null;&#xA;&#xA;&#x9;&#x9;protected IMCRL2&lt;IVerifyDataPortServerTypeSWC2> MCRL2_3&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.mcrl2_3 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.mcrl2_3 = (IMCRL2&lt;IVerifyDataPortServerTypeSWC2>) Services.getPort(&quot;mcrl2_3&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.mcrl2_3;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IVerifyServerPort&lt;IVerifyDataPortServerTypeSWC2> verify_data3 = null;&#xA;&#xA;&#x9;&#x9;protected IVerifyServerPort&lt;IVerifyDataPortServerTypeSWC2> Verify_data3&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.verify_data3 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.verify_data3 = (IVerifyServerPort&lt;IVerifyDataPortServerTypeSWC2>) Services.getPort(&quot;verify_data3&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.verify_data3;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseIPeer3Impl.cs" srcType="base" uri="br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl/bin/1.0.0.0/BaseIPeer3Impl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/bin/1.0.0.0/ITaskPort.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.task.VerifyPortType/bin/1.0.0.0/IVerifyPortType.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.certify.tactical.MCRL2/bin/1.0.0.0/IMCRL2.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort/bin/1.0.0.0/IVerifyServerPort.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerType/bin/1.0.0.0/IVerifyDataPortServerType.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.certify.ParallelCertificationSystemSWC2/bin/1.0.0.0/BaseIPeer3Impl.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.shelf.certify.ParallelCertificationSystemSWC2;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerTypeSWC2;&#xA;using br.ufc.mdcc.hpc.shelf.certify.tactical.MCRL2;&#xA;&#xA;namespace br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl&#xA;{&#xA;&#x9;public class IPeer3Impl : BaseIPeer3Impl, IPeer3&#xA;&#x9;{&#xA;&#x9;&#x9;public override void main()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;BEGIN PEER #3&quot;);&#xA;&#x9;&#x9;&#x9;//MCRL2_3.go ();&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;END PEER #3&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" name="IPeer3Impl.cs" srcType="user" uri="br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl/bin/1.0.0.0/IPeer3Impl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl/bin/1.0.0.0/BaseIPeer3Impl.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.certify.ParallelCertificationSystemSWC2/bin/1.0.0.0/IPeer3Impl.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="130" x="519" y="258">
        <color b="0" g="255" r="255"/>
      </visualDescription>
      <port name="verify_data3">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="verify_data" sRef="mcrl2_3"/>
      </port>
      <port name="verify3">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="verify" sRef="mcrl2_3"/>
      </port>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <interface iRef="IPeer4Impl" nArgs="0">
      <slice isRef="mcrl2_4">
        <originRef cRef="mcrl2_4" iRef="IMCRL2"/>
        <visualDescription h="10" w="10" x="3" y="16"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.task.VerifyPortType;&#xA;using br.ufc.mdcc.hpc.shelf.certify.tactical.MCRL2;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerType;&#xA;using br.ufc.mdcc.hpc.shelf.certify.ParallelCertificationSystemSWC2;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerTypeSWC2;&#xA;&#xA;namespace br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl &#xA;{&#xA;&#x9;public abstract class BaseIPeer4Impl: Application, BaseIPeer4&#xA;&#x9;{&#xA;&#x9;&#x9;private ITaskPort&lt;IVerifyPortType> verify4 = null;&#xA;&#xA;&#x9;&#x9;protected ITaskPort&lt;IVerifyPortType> Verify4&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.verify4 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.verify4 = (ITaskPort&lt;IVerifyPortType>) Services.getPort(&quot;verify4&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.verify4;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IMCRL2&lt;IVerifyDataPortServerTypeSWC2> mcrl2_4 = null;&#xA;&#xA;&#x9;&#x9;protected IMCRL2&lt;IVerifyDataPortServerTypeSWC2> MCRL2_4&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.mcrl2_4 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.mcrl2_4 = (IMCRL2&lt;IVerifyDataPortServerTypeSWC2>) Services.getPort(&quot;mcrl2_4&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.mcrl2_4;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IVerifyServerPort&lt;IVerifyDataPortServerTypeSWC2> verify_data4 = null;&#xA;&#xA;&#x9;&#x9;protected IVerifyServerPort&lt;IVerifyDataPortServerTypeSWC2> Verify_data4&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.verify_data4 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.verify_data4 = (IVerifyServerPort&lt;IVerifyDataPortServerTypeSWC2>) Services.getPort(&quot;verify_data4&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.verify_data4;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseIPeer4Impl.cs" srcType="base" uri="br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl/bin/1.0.0.0/BaseIPeer4Impl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/bin/1.0.0.0/ITaskPort.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.task.VerifyPortType/bin/1.0.0.0/IVerifyPortType.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.certify.tactical.MCRL2/bin/1.0.0.0/IMCRL2.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort/bin/1.0.0.0/IVerifyServerPort.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerType/bin/1.0.0.0/IVerifyDataPortServerType.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.certify.ParallelCertificationSystemSWC2/bin/1.0.0.0/BaseIPeer4Impl.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.shelf.certify.ParallelCertificationSystemSWC2;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerTypeSWC2;&#xA;using br.ufc.mdcc.hpc.shelf.certify.tactical.MCRL2;&#xA;&#xA;namespace br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl&#xA;{&#xA;&#x9;public class IPeer4Impl : BaseIPeer4Impl, IPeer4&#xA;&#x9;{&#xA;&#x9;&#x9;public override void main()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;BEGIN PEER #4&quot;);&#xA;&#x9;&#x9;&#x9;//MCRL2_4.go ();&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;END PEER #4&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" name="IPeer4Impl.cs" srcType="user" uri="br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl/bin/1.0.0.0/IPeer4Impl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpc.shelf.certify.impl.ParallelCertificationSystemSWC2Impl/bin/1.0.0.0/BaseIPeer4Impl.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.certify.ParallelCertificationSystemSWC2/bin/1.0.0.0/IPeer4Impl.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="129" x="520" y="306">
        <color b="0" g="255" r="255"/>
      </visualDescription>
      <port name="verify_data4">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="verify_data" sRef="mcrl2_4"/>
      </port>
      <port name="verify4">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="verify" sRef="mcrl2_4"/>
      </port>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <unit facet="0" iRef="IRootImpl" multiple="true" private="false" replica="0" uRef="root" visibleInterface="true">
      <super cRef="base" uRef="root"/>
      <visualDescription h="40" w="80" x="355" y="60"/>
    </unit>
    <unit facet="0" iRef="IPeer1Impl" multiple="true" private="false" replica="0" uRef="peer1" visibleInterface="true">
      <super cRef="base" uRef="peer1"/>
      <visualDescription h="40" w="80" x="65" y="363"/>
    </unit>
    <unit facet="0" iRef="IPeer2Impl" multiple="true" private="false" replica="0" uRef="peer2" visibleInterface="true">
      <super cRef="base" uRef="peer2"/>
      <visualDescription h="40" w="80" x="224" y="391"/>
    </unit>
    <unit facet="0" iRef="IPeer3Impl" multiple="true" private="false" replica="0" uRef="peer3" visibleInterface="true">
      <super cRef="base" uRef="peer3"/>
      <visualDescription h="40" w="80" x="383" y="398"/>
    </unit>
    <unit facet="0" iRef="IPeer4Impl" multiple="true" private="false" replica="0" uRef="peer4" visibleInterface="true">
      <super cRef="base" uRef="peer4"/>
      <visualDescription h="40" w="80" x="528" y="383"/>
    </unit>
  </componentInfo>
</component:component>