<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000932341eeb10d9e3d3a9e19e043757014ad48400726a8311e80aa21bb419273f5688288052535060f189af7f86009b2bf8bd4bc4469a0e522dbed0dcd7e2f94636735fc817653dac9552df8fcc637f66ac0bf6e0e0d007cbcfd1cca5e9093c94da5fa9b73045111fd07bb82ac3f5fee1b828ce69579d8d2aca5e347a6fdbfccba" isAbstract="false" kind="Synchronizer" name="VerifyDataPortImpl" packagePath="br.ufc.mdcc.hpc.shelf.tactical.environment.impl">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="00240000048000009400000006020000002400005253413100040000110000001fe9fadb4c1025e72aff28872fb5fbd238acd27e3d59d16e734e425c608135074599beae81df8b2193cf66ac4a87453b65f16017f4c611002dade04d3f82bf6986d94bfa38d4b444c7d94c7719bc8a691694252f2420c876b05b018f3484646da636160dfbd9fde5e058a2cd7e21a6cd05ee431194528c8dd5536c7f41c9c7b5" localRef="base" location="br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort/VerifyDataPort.hpe" name="VerifyDataPort" package="br.ufc.mdcc.hpc.shelf.tactical.environment" version="1.0.0.0">
        <visualDescription h="60" w="100" x="137" y="79">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="client_port_type" varName="C"/>
        <parameter formFieldId="server_port_type" varName="S"/>
        <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="false" uRef="client">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
        <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="false" uRef="server">
          <visualDescription h="20" w="20" x="28" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
    <facet_configuration facet="0" multiple="false"/>
  </header>
  <componentInfo>
    <innerComponent localRef="verify_data_port_client_type" location="br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortClientType/VerifyDataPortClientType.hpe" multiple="false" name="VerifyDataPortClientType" package="br.ufc.mdcc.hpc.shelf.tactical.environment" exposed="false">
      <visualDescription h="60" w="100" x="92" y="425">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="true" uRef="environment_port_type">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent localRef="verify_data_port_server_type" location="br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerType/VerifyDataPortServerType.hpe" multiple="false" name="VerifyDataPortServerType" package="br.ufc.mdcc.hpc.shelf.tactical.environment" exposed="false">
      <visualDescription h="60" w="100" x="96" y="416">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="true" uRef="environment_port_type">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="verify_data_port_client_type" direct="true" varName="C"/>
    <supplyParameter cRef="verify_data_port_server_type" direct="true" varName="S"/>
    <interface iRef="IVerifyClientPort" nArgs="1">
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortClientType;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingBase;&#xA;&#xA;namespace br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortImpl &#xA;{&#xA;&#x9;public abstract class BaseIVerifyClientPort: Synchronizer, &#xA;&#x9;BaseIClientBase&lt;IVerifyDataPortClientType>&#xA;&#x9;{&#xA;&#x9;&#x9;/*private IEnvironmentPortType client_port_type = null;&#xA;&#xA;&#x9;&#x9;protected IEnvironmentPortType Client_port_type&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.client_port_type == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.client_port_type = (IEnvironmentPortType) Services.getPort(&quot;client_port_type&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.client_port_type;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}*/&#xA;&#xA;&#xA;&#x9;&#x9;private IVerifyDataPortClientType client = null;&#xA;&#x9;&#x9;public IVerifyDataPortClientType Client { get {if (this.client == null)&#xA;&#x9;&#x9;&#x9;&#x9;this.client = (IVerifyDataPortClientType) Services.getPort(&quot;client_port_type&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.client; } }&#xA;&#x9;}&#xA;}" name="BaseIVerifyClientPort.cs" srcType="base" uri="br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortImpl/bin/1.0.0.0/BaseIVerifyClientPort.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType/bin/1.0.0.0/IEnvironmentPortType.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort/bin/1.0.0.0/BaseIClientBase.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortClientType;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingBase;&#xA;&#xA;&#xA;&#xA;namespace br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortImpl&#xA;{&#xA;&#x9;public class IVerifyClientPort : BaseIVerifyClientPort, IClientBase&#xA;&#x9;&lt;IVerifyDataPortClientType>&#xA;&#x9;{   public int certifier = 0; &#xA;&#x9;&#x9;public int  operation_tag = 1 ;&#xA;&#xA;&#x9;&#x9;public int dataCertifierTactical = 71; &#xA;&#x9;&#x9;public int number_units_tactical;&#xA;&#x9;&#x9;public int [] number_properties_per_unit_tactical;&#xA;&#x9;&#x9;public int slice_size;&#xA;&#x9;&#x9;public int[] properties_status;&#xA;&#x9;&#x9;public int []index_first_prop_tact;&#xA;&#x9;&#x9;public int num_properties;&#xA;&#x9;&#x9;public string [] property_files;&#xA;&#xA;&#x9;&#x9;int num_properties_aux;&#xA;&#x9;&#x9;int number_prop_read;&#xA;&#x9;&#x9;string[] arr ;&#xA;&#x9;&#x9;public override void main()&#xA;&#x9;&#x9;{ &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;/*public int getRemoteSize(){&#xA;&#x9;&#x9;&#x9;return channel.RemoteSize;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;}*/&#xA;&#xA;&#x9;&#x9;//SWC2&#xA;&#xA;&#x9;&#x9;void setNumProperties(int numProperties){&#xA;&#x9;&#x9;&#x9;num_properties = numProperties;&#xA;&#xA;&#x9;&#x9;&#x9;number_units_tactical = channel.RemoteSize;&#xA;&#x9;&#x9;&#x9;number_properties_per_unit_tactical = new int[number_units_tactical];&#xA;&#x9;&#x9;&#x9;slice_size = (int) Math.Floor( (double)num_properties / number_units_tactical);&#xA;&#x9;&#x9;&#x9;num_properties_aux = num_properties;&#xA;&#x9;&#x9;&#x9;for(int i=0;i&lt;number_units_tactical;i++){&#xA;&#x9;&#x9;&#x9;&#x9;number_properties_per_unit_tactical [i] = slice_size;&#xA;&#x9;&#x9;&#x9;&#x9;num_properties_aux = num_properties_aux - slice_size;&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;int index=0;&#xA;&#x9;&#x9;&#x9;for(int i =0 ; i&lt; num_properties_aux;i++){&#xA;&#x9;&#x9;&#x9;&#x9;number_properties_per_unit_tactical [index++] += 1;&#xA;&#x9;&#x9;&#x9;&#x9;if (index == number_units_tactical){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;index = 0;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;num_properties_aux = 0;&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;arr = new string[slice_size+1];&#xA;&#xA;&#x9;&#x9;&#x9;properties_status = new int[slice_size+1];&#xA;&#x9;&#x9;&#x9;index_first_prop_tact = new int[number_units_tactical];&#xA;&#x9;&#x9;&#x9;number_prop_read=0;&#xA;&#xA;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9; void setMcrl2File(ref string mCRL2_file){&#xA;&#x9;&#x9;&#x9;for (int s = 0; s &lt; channel.RemoteSize; s++) {&#xA;&#x9;&#x9;&#x9;&#x9;channel.Send&lt;int> (0, s, operation_tag);&#xA;&#x9;&#x9;&#x9;&#x9;channel.Send&lt;string>(mCRL2_file, s, dataCertifierTactical);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void setPropertyFiles(ref string [] property_files){&#xA;&#x9;&#x9;&#x9;this.property_files = property_files;&#xA;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void setNumPropsTacticals(){&#xA;&#x9;&#x9;&#x9;for (int i = 0; i &lt; number_units_tactical; i++) {&#xA;&#x9;&#x9;&#x9;&#x9;channel.Send&lt;int> (1, i, operation_tag);&#xA;&#x9;&#x9;&#x9;&#x9;channel.Send&lt;int> (number_properties_per_unit_tactical [i], i, dataCertifierTactical);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;void setIndexFirstPropTacticals(){&#xA;&#x9;&#x9;&#x9;for (int i = 0; i &lt; number_units_tactical; i++) {&#xA;&#x9;&#x9;&#x9;&#x9;channel.Send&lt;int> (2, i, operation_tag);&#xA;&#x9;&#x9;&#x9;&#x9;channel.Send&lt;int> (number_prop_read, i, dataCertifierTactical);&#xA;&#x9;&#x9;&#x9;&#x9;index_first_prop_tact [i] = number_prop_read;&#xA;&#x9;&#x9;&#x9;&#x9;number_prop_read += number_properties_per_unit_tactical[i];&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;void setPropertiesTacticals(){&#xA;&#xA;&#x9;&#x9;&#x9;for (int i = 0; i &lt; number_units_tactical; i++) {&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Array.Copy (property_files, index_first_prop_tact [i], arr, 0, number_properties_per_unit_tactical[i]);&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;channel.Send&lt;int> (3, i, operation_tag);&#xA;&#x9;&#x9;&#x9;&#x9;channel.Send&lt;string>(arr, i, dataCertifierTactical);&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#xA;&#xA;&#xA;&#xA;&#xA;&#x9;&#xA;&#xA;&#x9;&#x9;//c4&#xA;&#xA;&#x9;&#x9;void setNumProgs (int number){&#xA;&#x9;&#x9;&#x9;channel.Send&lt;int>(number, destination, dataCertifierTactical);&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;void setUnitsProgs (ref int[] num_units_program){&#xA;&#x9;&#x9;&#x9;channel.Send&lt;int>(num_units_program, destination, dataCertifierTactical);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;void setArgsProgs (ref string[] args_programs){&#xA;&#x9;&#x9;&#x9;channel.Send&lt;string>(args_programs, destination, dataCertifierTactical);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;void setProgs (ref string[] programs){&#xA;&#x9;&#x9;&#x9;channel.Send&lt;string>(programs, destination, dataCertifierTactical);&#xA;&#xA;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;public MPI.Intercommunicator channel &#xA;&#x9;&#x9;{set { channel = value;} get {return channel;}}&#xA;&#xA;&#x9;&#x9;public override void after_initialize ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;int remote_leader = this.UnitRanks [&quot;server&quot;] [0];&#xA;&#x9;&#x9;&#x9;channel = new MPI.Intercommunicator(this.PeerComm, 0, this.Communicator, remote_leader, 0);&#xA;&#xA;&#x9;     }&#xA;&#xA;&#xA;&#x9;}&#xA;}&#xA;" name="IVerifyClientPort.cs" srcType="user" uri="br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortImpl/bin/1.0.0.0/IVerifyClientPort.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortImpl/bin/1.0.0.0/BaseIVerifyClientPort.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort/bin/1.0.0.0/IClientBase.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="80" x="30" y="66">
        <color b="0" g="255" r="255"/>
      </visualDescription>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <interface iRef="IVerifyServerPort" nArgs="1">
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerType;&#xA;&#xA;namespace br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortImpl &#xA;{&#xA;&#x9;public abstract class BaseIVerifyServerPort: Synchronizer, BaseIVerifyServerPort&#xA;&#x9;&lt;IVerifyDataPortServerType>&#xA;&#x9;{&#xA;&#x9;&#x9;/*private IEnvironmentPortType server_port_type = null;&#xA;&#xA;&#x9;&#x9;protected IEnvironmentPortType Server_port_type&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.server_port_type == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.server_port_type = (IEnvironmentPortType) Services.getPort(&quot;server_port_type&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.server_port_type;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;set { server_port_type = value; }&#xA;&#x9;&#x9;}*/&#xA;&#xA;&#x9;&#x9;private IVerifyDataPortServerType server = default(IVerifyDataPortServerType);&#xA;&#x9;&#x9;public IVerifyDataPortServerType Server { set {&#x9;server = value; } get {if (this.server == null)&#xA;&#x9;&#x9;&#x9;&#x9;this.server = (IVerifyDataPortServerType) Services.getPort(&quot;server_port_type&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.server;}}&#xA;&#x9;}&#xA;}" name="BaseIVerifyServerPort.cs" srcType="base" uri="br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortImpl/bin/1.0.0.0/BaseIVerifyServerPort.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType/bin/1.0.0.0/IEnvironmentPortType.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort/bin/1.0.0.0/BaseIVerifyServerPort.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerType;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingBase;&#xA;using System.IO;&#xA;&#xA;namespace br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortImpl&#xA;{&#xA;&#x9;public class IVerifyServerPort : &#xA;&#x9;BaseIVerifyServerPort, &#xA;&#x9;IVerifyServerPort&lt;IVerifyDataPortServerType>&#xA;&#x9;{   &#xA;&#x9;&#x9;public int certifier = 0; &#xA;&#x9;&#x9;public int operation, operation_tag = 0 ;&#xA;&#xA;&#x9;&#x9;public int dataCertifierTactical = 71; &#xA;&#xA;&#x9;&#x9;//swc2&#xA;&#x9;&#x9;public string mCRL2_file;&#xA;&#x9;&#x9;public string []property_files; &#xA;&#xA;&#x9;//c4&#xA;&#x9;&#x9;public int[] num_units_program;&#xA;&#x9;&#x9;public string[] args_programs;&#xA;&#x9;&#x9;public string[] programs;&#xA;&#xA;&#xA;&#x9;&#x9;public override void main()&#xA;&#x9;&#x9;{  &#xA;&#x9;&#x9;&#x9;while (true) {&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;operation = channel.Receive&lt;int> (certifier, operation_tag);&#xA;&#x9;&#x9;&#x9;&#x9;switch(operation){&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;case 0:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;setMcrl2File ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA; &#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;case 1:&#x9;setNumProperties ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;case 2:setIndexMyFirstProp ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;case 3: setPropertyFiles();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;case 4: setNumProgs();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;case 5: setUnitsProgs();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;case 6: setArgsProgs();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;case 7: setProgs();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;//swc2&#xA;&#x9;&#x9;public void setMcrl2File(){&#xA;&#x9;&#x9;&#x9;mCRL2_file = channel.Receive&lt;string>(certifier, dataCertifierTactical);&#xA;&#x9;&#x9;&#x9;service.setMcrl2File(ref mCRL2_file);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;void setNumProperties(){&#xA;&#xA;&#x9;&#x9;&#x9;service.setNumProperties(channel.Receive&lt;int>(certifier,dataCertifierTactical));&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;void setIndexMyFirstProp(){&#xA;&#xA;&#x9;&#x9;&#x9;service.setIndexMyFirstProp(channel.Receive&lt;int>(certifier,dataCertifierTactical));&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void setPropertyFiles(){&#xA;&#x9;&#x9;&#x9;channel.Receive&lt;string>(certifier,dataCertifierTactical, ref property_files);&#xA;&#x9;&#x9;&#x9;service.setPropertyFiles (ref property_files);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;//c4&#xA;&#xA;&#xA;&#x9;&#x9;void setNumProgs (){&#xA;&#xA;&#x9;&#x9;&#x9;service.setNumProgs(channel.Receive&lt;int>(certifier,dataCertifierTactical));&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;void setUnitsProgs (){&#xA;&#x9;&#x9;&#x9;channel.Receive&lt;int>(certifier,dataCertifierTactical, ref num_units_program);&#xA;&#x9;&#x9;&#x9;service.setUnitsProgs (ref num_units_program);&#xA;&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;void setArgsProgs (){&#xA;&#xA;&#x9;&#x9;&#x9;channel.Receive&lt;string>(certifier,dataCertifierTactical, ref args_programs);&#xA;&#x9;&#x9;&#x9;service.setArgsProgs (ref args_programs);&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;void setProgs (){&#x9;&#xA;&#x9;&#x9;&#x9;channel.Receive&lt;string>(certifier,dataCertifierTactical, ref programs);&#xA;&#x9;&#x9;&#x9;service.setProgs (ref programs);&#xA;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;private IVerifyDataPortServerType service;&#xA;&#xA;&#x9;&#x9;public IVerifyDataPortServerType Server {&#xA;&#x9;&#x9;&#x9;set {&#xA;&#x9;&#x9;&#x9;&#x9;this.service = value;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;public MPI.Intercommunicator channel &#xA;&#x9;&#x9;{set { channel = value;} get {return channel;}}&#xA;&#xA;&#x9;&#x9;public override void after_initialize ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;int remote_leader = this.UnitRanks [&quot;client&quot;] [0];&#xA;&#x9;&#x9;&#x9;channel = new MPI.Intercommunicator(this.PeerComm, 0, this.Communicator, remote_leader, 0);&#xA;&#x9;&#x9;}&#xA;&#xA;&#xA;&#xA;&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;" name="IVerifyServerPort.cs" srcType="user" uri="br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortImpl/bin/1.0.0.0/IVerifyServerPort.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortImpl/bin/1.0.0.0/BaseIVerifyServerPort.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort/bin/1.0.0.0/IVerifyServerPort.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="80" x="422" y="136">
        <color b="0" g="165" r="255"/>
      </visualDescription>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <unit facet="0" iRef="IVerifyClientPort" multiple="false" private="false" replica="0" uRef="client" visibleInterface="true">
      <super cRef="base" uRef="client"/>
      <visualDescription h="40" w="80" x="53" y="280"/>
    </unit>
    <unit facet="0" iRef="IVerifyServerPort" multiple="false" private="false" replica="0" uRef="server" visibleInterface="true">
      <super cRef="base" uRef="server"/>
      <visualDescription h="40" w="80" x="362" y="303"/>
    </unit>
  </componentInfo>
</component:component>