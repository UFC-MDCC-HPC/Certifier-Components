<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000ffe1dd5b9606762e6da5cac5c278e197e79398d5f396d8918ea707b5108a1bda4e5a978eb8d68e3143898e6902be70f5c4bafdcb8b5a0d1cd107b391338f2df5367ba1f6b2e8555b3a5bc6352c44f028b98063ccb6dff1e68c9c9e17852428268a48dfc2fe6a2c9cd2e1183684534952e363ae295ef3fe4c99de2fc8c4f5358b" isAbstract="false" kind="Synchronizer" name="VerifyDataPortC4Impl" packagePath="br.ufc.mdcc.hpc.shelf.tactical.environment.impl">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="00240000048000009400000006020000002400005253413100040000110000001fe9fadb4c1025e72aff28872fb5fbd238acd27e3d59d16e734e425c608135074599beae81df8b2193cf66ac4a87453b65f16017f4c611002dade04d3f82bf6986d94bfa38d4b444c7d94c7719bc8a691694252f2420c876b05b018f3484646da636160dfbd9fde5e058a2cd7e21a6cd05ee431194528c8dd5536c7f41c9c7b5" localRef="base" location="br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort/VerifyDataPort.hpe" name="VerifyDataPort" package="br.ufc.mdcc.hpc.shelf.tactical.environment" version="1.0.0.0">
        <visualDescription h="60" w="100" x="190" y="69">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="client_port_type" varName="C"/>
        <parameter formFieldId="server_port_type" varName="S"/>
        <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="false" uRef="client">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
        <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="false" uRef="server">
          <visualDescription h="20" w="20" x="28" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
    <facet_configuration facet="0" multiple="false"/>
  </header>
  <componentInfo>
    <innerComponent localRef="verify_data_port_client_type_c4" location="br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortClientTypeC4/VerifyDataPortClientTypeC4.hpe" multiple="false" name="VerifyDataPortClientTypeC4" package="br.ufc.mdcc.hpc.shelf.tactical.environment" exposed="false">
      <visualDescription h="60" w="100" x="72" y="347">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="true" uRef="environment_port_type">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent localRef="verify_data_port_client_type_swc2" location="br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerTypeC4/VerifyDataPortServerTypeC4.hpe" multiple="false" name="VerifyDataPortServerTypeC4" package="br.ufc.mdcc.hpc.shelf.tactical.environment" exposed="false">
      <visualDescription h="60" w="100" x="219" y="333">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="true" uRef="environment_port_type">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="verify_data_port_client_type_c4" direct="true" varName="C"/>
    <supplyParameter cRef="verify_data_port_client_type_swc2" direct="true" varName="S"/>
    <interface iRef="IVerifyClientPortC4" nArgs="1">
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortClientTypeC4;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingBase;&#xA;using br.ufc.mdcc.hpc.storm.binding.channel.Binding;&#xA;&#xA;&#xA;namespace br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortC4Impl &#xA;{&#xA;&#x9;public abstract class BaseIVerifyClientPortC4&lt;C>: Synchronizer, BaseIClientBase&lt;C>&#xA;&#x9;    where C:IVerifyDataPortClientTypeC4&#xA;&#x9;{&#xA;&#x9;&#x9;protected const int FACET_CLIENT = 0;&#xA;&#x9;&#x9;protected const int FACET_SERVER = 1;&#xA;&#xA;&#x9;&#x9;private C client = default(C);&#xA;&#xA;&#x9;&#x9;public C Client { get {if (this.client == null)&#xA;&#x9;&#x9;&#x9;&#x9;this.client = (C) Services.getPort(&quot;client_port_type&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.client; } }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IChannel channel = null;&#xA;&#x9;&#x9;protected IChannel Channel&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.channel == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.channel = (IChannel) Services.getPort(&quot;channel&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.channel;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseIVerifyClientPortC4.cs" srcType="base" uri="br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortC4Impl/bin/1.0.0.0/BaseIVerifyClientPortC4.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType/bin/1.0.0.0/IEnvironmentPortType.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort/bin/1.0.0.0/BaseIClientBase.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingBase;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortClientTypeC4;&#xA;namespace br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortC4Impl&#xA;{&#xA;&#x9;public class IVerifyClientPortC4&lt;C> : BaseIVerifyClientPortC4&lt;C>, IClientBase&lt;C>&#xA;&#x9;&#x9;where C:IVerifyDataPortClientTypeC4&#xA;&#x9;{&#xA;&#x9;&#x9;private int client_size = 0;&#xA;&#xA;&#x9;&#x9;public int  operation_tag = 1 ;&#xA;&#xA;&#x9;&#x9;public int dataCertifierTactical = 71; &#xA;&#x9;&#x9;//C4&#xA;&#xA;&#x9;&#x9;public int num_programs;&#xA;&#x9;&#x9;public string []programs;&#xA;&#x9;&#x9;public string[] args_programs;&#xA;&#x9;&#x9;public int []num_units_program;&#xA;&#xA;&#x9;&#x9;//public static string[] arr_transfer_prop;&#xA;&#x9;&#x9;public  string[] arr_transfer_tac;&#xA;&#x9;&#x9;public  int[] arr_int_transfer_tac;&#xA;&#x9;&#x9;public int slice_size_tactical;&#xA;&#x9;&#x9;public int []index_first_prog_unit_tactical;&#xA;&#x9;&#x9;public int [] number_progs_per_unit_tactical;&#xA;&#xA;&#x9;&#x9;public int number_units_tactical;&#xA;&#x9;&#x9;public override void main()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//c4&#xA;&#xA;&#x9;&#x9;Tuple&lt;int,int> source_client_unit(int u)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;return new Tuple&lt;int, int> (FACET_SERVER, u);&#x9;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void setNumProgs (int number)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;num_programs = number;&#xA;&#xA;&#x9;&#x9;&#x9;number_units_tactical = client_size;&#xA;&#xA;&#x9;&#x9;&#x9;int num_progs_aux; int index; &#xA;&#xA;&#x9;&#x9;&#x9;slice_size_tactical = (int) Math.Floor( (double)num_programs / number_units_tactical);&#xA;&#x9;&#x9;&#x9;num_progs_aux = num_programs;&#xA;&#xA;&#x9;&#x9;&#x9;for (int j = 0; j &lt; number_units_tactical; j++) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;number_progs_per_unit_tactical [j] = slice_size_tactical;&#xA;&#x9;&#x9;&#x9;&#x9;num_progs_aux = num_progs_aux - slice_size_tactical;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;index=0;&#xA;&#x9;&#x9;&#x9;for(int j=0 ; j&lt; num_progs_aux;j++)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;number_progs_per_unit_tactical[index++]+= 1;&#xA;&#x9;&#x9;&#x9;&#x9;if (index == number_units_tactical)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;index = 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;for (int j = 0; j &lt; number_units_tactical; j++) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Channel.Send&lt;int> (4, source_client_unit(j), operation_tag);&#xA;&#x9;&#x9;&#x9;&#x9;Channel.Send&lt;int> (number_progs_per_unit_tactical [j], source_client_unit(j), dataCertifierTactical);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;arr_transfer_tac = new string[slice_size_tactical + 1];&#xA;&#x9;&#x9;&#x9;arr_int_transfer_tac = new int[slice_size_tactical + 1];&#xA;&#x9;&#x9;&#x9;index_first_prog_unit_tactical=new int[number_units_tactical];&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void setUnitsProgs (ref int[] num_units_program)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this.num_units_program = num_units_program;&#xA;&#x9;&#x9;&#x9;//channel.Send&lt;int>(num_units_program, destination, dataCertifierTactical);&#xA;&#xA;&#x9;&#x9;&#x9;int number_prog_read = 0;&#xA;&#xA;&#x9;&#x9;&#x9;for (int j = 0; j &lt; number_units_tactical; j++) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;index_first_prog_unit_tactical [j] = number_prog_read;&#xA;&#x9;&#x9;&#x9;&#x9;/*&#x9;Console.WriteLine (&quot; i &quot; + i + &quot; j &quot; + j + &quot; tactical_first_unit[i]+j &quot; + (tactical_first_unit [i] + j)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot; number_progs_per_unit_tactical [i] &quot; + number_progs_per_unit_tactical [i][j] +&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; index_first_prog_unit_tactical [i][j] &quot; + index_first_prog_unit_tactical [i] [j]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+&quot; number_prog_read &quot; +number_prog_read);&#xA;*/&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;proximo2&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Array.Copy (num_units_program, index_first_prog_unit_tactical[j], arr_int_transfer_tac, 0, number_progs_per_unit_tactical [j]);&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;for (int k = 0; k &lt; number_progs_per_unit_tactical [j]; k++) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;unities of programs to &quot; + j);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (arr_int_transfer_tac [k]);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Channel.Send&lt;int> (5, source_client_unit(j), operation_tag);&#xA;&#x9;&#x9;&#x9;&#x9;Channel.Send&lt;int>(arr_int_transfer_tac, source_client_unit(j), dataCertifierTactical);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;number_prog_read += number_progs_per_unit_tactical [j];&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void setArgsProgs (ref string[] args_programs)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this.args_programs = args_programs;&#xA;&#xA;&#x9;&#x9;&#x9;for (int j = 0; j &lt; number_units_tactical; j++) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Array.Copy (args_programs, index_first_prog_unit_tactical[j], arr_transfer_tac, 0, number_progs_per_unit_tactical [j]);&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;for (int k = 0; k &lt; number_progs_per_unit_tactical [j]; k++) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;args&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (arr_transfer_tac [k]);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//Communicator.world.Send&lt;string> (arr_transfer_tac[i], tactical_first_unit[i]+j, dataCertifierTactical);&#xA;&#x9;&#x9;&#x9;&#x9;Channel.Send&lt;int> (6, source_client_unit(j), operation_tag);&#xA;&#x9;&#x9;&#x9;&#x9;Channel.Send&lt;string>(arr_transfer_tac, source_client_unit(j), dataCertifierTactical);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;//channel.Send&lt;string>(args_programs, destination, dataCertifierTactical);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void setProgs (ref string[] programs)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this.programs = programs;&#xA;&#xA;&#x9;&#x9;&#x9;for (int j = 0; j &lt; number_units_tactical; j++) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Array.Copy (programs, index_first_prog_unit_tactical[j], arr_transfer_tac, 0, number_progs_per_unit_tactical [j]);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;for (int k = 0; k &lt; number_progs_per_unit_tactical [j]; k++) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;progs&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (arr_transfer_tac [k]);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;proximo&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Channel.Send&lt;int> (7, source_client_unit(j), operation_tag);&#xA;&#x9;&#x9;&#x9;&#x9;Channel.Send&lt;string>(arr_transfer_tac, source_client_unit(j), dataCertifierTactical);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;//channel.Send&lt;string>(programs, destination, dataCertifierTactical);&#xA;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public override void after_initialize ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this.client_size = this.UnitSizeInFacet[FACET_CLIENT][&quot;client&quot;];&#xA;&#x9;&#x9;}&#xA;&#x9;&#xA;&#x9;}&#xA;}&#xA;" name="IVerifyClientPortC4.cs" srcType="user" uri="br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortC4Impl/bin/1.0.0.0/IVerifyClientPortC4.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortC4Impl/bin/1.0.0.0/BaseIVerifyClientPortC4.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort/bin/1.0.0.0/IClientBase.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="136" x="30" y="66">
        <color b="0" g="255" r="255"/>
      </visualDescription>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <interface iRef="IVerifyServerPortC4" nArgs="1">
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerTypeC4;&#xA;using br.ufc.mdcc.hpc.storm.binding.channel.Binding;&#xA;&#xA;namespace br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortC4Impl &#xA;{&#xA;&#x9;public abstract class BaseIVerifyServerPortC4&lt;S>: Synchronizer, BaseIVerifyServerPort&lt;S>&#xA;&#x9;&#x9;where S:IVerifyDataPortServerTypeC4&#xA;&#x9;{&#xA;&#x9;&#x9;protected const int FACET_CLIENT = 0;&#xA;&#x9;&#x9;protected const int FACET_SERVER = 1;&#xA;&#xA;&#x9;&#x9;private S server = default(S);&#xA;&#x9;&#x9;public S Server { set {&#x9;server = value; } get {if (this.server == null)&#xA;&#x9;&#x9;&#x9;&#x9;this.server = (S) Services.getPort(&quot;server_port_type&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.server;}}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IChannel channel = null;&#xA;&#x9;&#x9;protected IChannel Channel&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.channel == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.channel = (IChannel) Services.getPort(&quot;channel&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.channel;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseIVerifyServerPortC4.cs" srcType="base" uri="br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortC4Impl/bin/1.0.0.0/BaseIVerifyServerPortC4.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType/bin/1.0.0.0/IEnvironmentPortType.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort/bin/1.0.0.0/BaseIVerifyServerPort.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerTypeC4;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingBase;&#xA;namespace br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortC4Impl&#xA;{&#xA;&#x9;public class IVerifyServerPortC4&lt;S> : BaseIVerifyServerPortC4&lt;S>, IVerifyServerPort&lt;S>&#xA;&#x9;&#x9;where S:IVerifyDataPortServerTypeC4&#xA;&#x9;{&#xA;&#x9;&#x9;public Tuple&lt;int,int> certifier = new Tuple&lt;int,int> (FACET_CLIENT, 0);&#xA;&#x9;&#x9;public int operation, operation_tag = 0 ;&#xA;&#xA;&#x9;&#x9;public int dataCertifierTactical = 71; &#xA;&#xA;&#x9;&#x9;//c4&#xA;&#x9;&#x9;public int[] num_units_program;&#xA;&#x9;&#x9;public string[] args_programs;&#xA;&#x9;&#x9;public string[] programs;&#xA;&#x9;&#x9;public override void main()&#xA;&#x9;&#x9;{  &#xA;&#x9;&#x9;&#x9;while (true) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;operation = Channel.Receive&lt;int> (certifier, operation_tag);&#xA;&#x9;&#x9;&#x9;&#x9;switch(operation)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//C4&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case 0: setNumProgs();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case 1: setUnitsProgs();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case 2: setArgsProgs();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case 3: setProgs();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;//c4&#xA;&#x9;&#x9;void setNumProgs ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;service.setNumProgs(Channel.Receive&lt;int>(certifier,dataCertifierTactical));&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void setUnitsProgs ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Channel.Receive&lt;int>(certifier,dataCertifierTactical, ref num_units_program);&#xA;&#x9;&#x9;&#x9;service.setUnitsProgs (ref num_units_program);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void setArgsProgs ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Channel.Receive&lt;string>(certifier,dataCertifierTactical, ref args_programs);&#xA;&#x9;&#x9;&#x9;service.setArgsProgs (ref args_programs);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void setProgs ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Channel.Receive&lt;string>(certifier,dataCertifierTactical, ref programs);&#xA;&#x9;&#x9;&#x9;service.setProgs (ref programs);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private IVerifyDataPortServerTypeC4 service;&#xA;&#xA;&#x9;&#x9;public IVerifyDataPortServerTypeC4 Service { set { this.service = value; } get { return service; } }&#xA;&#x9;&#xA;&#x9;///public MPI.Intercommunicator channel {set { channel = value;} get {return channel;}}&#xA;&#xA;&#x9;&#x9;public override void after_initialize ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;//&#x9;int remote_leader = this.UnitRanks [&quot;client&quot;] [0];&#xA;&#x9;&#x9;//&#x9;channel = new MPI.Intercommunicator(this.PeerComm, 0, this.Communicator, remote_leader, 0);&#xA;&#x9;&#x9;}&#xA;&#x9;&#xA;&#x9;}&#xA;}&#xA;" name="IVerifyServerPortC4.cs" srcType="user" uri="br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortC4Impl/bin/1.0.0.0/IVerifyServerPortC4.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpc.shelf.tactical.environment.impl.VerifyDataPortC4Impl/bin/1.0.0.0/BaseIVerifyServerPortC4.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort/bin/1.0.0.0/IVerifyServerPort.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="138" x="299" y="119">
        <color b="0" g="165" r="255"/>
      </visualDescription>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <unit facet="0" iRef="IVerifyClientPortC4" multiple="false" private="false" replica="0" uRef="client" visibleInterface="true">
      <super cRef="base" uRef="client"/>
      <visualDescription h="40" w="80" x="53" y="280"/>
    </unit>
    <unit facet="0" iRef="IVerifyServerPortC4" multiple="false" private="false" replica="0" uRef="server" visibleInterface="true">
      <super cRef="base" uRef="server"/>
      <visualDescription h="40" w="80" x="362" y="303"/>
    </unit>
  </componentInfo>
</component:component>