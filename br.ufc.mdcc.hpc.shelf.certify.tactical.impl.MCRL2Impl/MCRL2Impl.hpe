<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="002400000480000094000000060200000024000052534131000400001100000019c54a7b3832b4718c8a0a126f6507e12bca7a25e9741b478a1ebc90ea4875b088dc2803cd88e64baa63586c9d4b154d6083ec46869b4de44004735ea504ae82bd36a6ec07f59c5d668f3f38f54ab7fb84be3eb5caa394bb4c747704e398bfe139d7f23bd31108886f2295ef3475bb1e6a8ca4f10ae1fb844be482b1777a3bab" isAbstract="false" kind="Computation" name="MCRL2Impl" packagePath="br.ufc.mdcc.hpc.shelf.certify.tactical.impl">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="002400000480000094000000060200000024000052534131000400001100000001120408f1e70062f0008b12ca4e9ff58dfb0a2b6ff0f2edb113d3174a4596157d3f9be1fb8b40de97e69b4711cfdcac2e6384ab83904e3e39c5af223f89c59ffdc87c2000bfa74000d11ed731d6727ceee533ae6c1f7030843098d7a1eee117a263c53c60f7db6f75072e0d722a39270603e963e8bc29fca6034d62c2e6cdaf" localRef="base" location="br.ufc.mdcc.hpc.shelf.certify.tactical.MCRL2/MCRL2.hpe" name="MCRL2" package="br.ufc.mdcc.hpc.shelf.certify.tactical" version="1.0.0.0">
        <visualDescription h="60" w="100" x="270" y="181">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <port index_replica="0" localRef="verify" location="br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/TaskBindingBase.hpe" multiple="false" name="TaskBindingBase" package="br.ufc.mdcc.hpc.storm.binding.task" exposed="true">
          <visualDescription h="60" w="146" x="378" y="126">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="task_port_type" varName="T"/>
          <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="true" uRef="peer">
            <visualDescription h="20" w="20" x="14" y="19"/>
          </unitBounds>
        </port>
        <port index_replica="0" localRef="verify_data" location="br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort/VerifyDataPort.hpe" multiple="false" name="VerifyDataPort" package="br.ufc.mdcc.hpc.shelf.tactical.environment" exposed="true">
          <visualDescription h="63" w="218" x="312" y="336">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="client_port_type" varName="C"/>
          <parameter formFieldId="server_port_type" varName="S"/>
          <unitBounds facet="0" facet_instance="0" parallel="false" uRef="client">
            <visualDescription h="20" w="20" x="5" y="2"/>
          </unitBounds>
          <unitBounds facet="1" facet_instance="0" facet_instance_enclosing="0" parallel="false" uRef="server">
            <visualDescription h="20" w="20" x="28" y="2"/>
          </unitBounds>
        </port>
        <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="true" uRef="tactical">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
    <facet_configuration facet="0" multiple="false"/>
  </header>
  <componentInfo>
    <innerComponent localRef="verify_client_port_type" location="br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortClientTypeSWC2/VerifyDataPortClientTypeSWC2.hpe" multiple="false" name="VerifyDataPortClientTypeSWC2" package="br.ufc.mdcc.hpc.shelf.tactical.environment" exposed="false">
      <visualDescription h="60" w="100" x="77" y="310">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="true" uRef="environment_port_type">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent localRef="verify_server_port_type" location="br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerTypeSWC2/VerifyDataPortServerTypeSWC2.hpe" multiple="false" name="VerifyDataPortServerTypeSWC2" package="br.ufc.mdcc.hpc.shelf.tactical.environment" exposed="false">
      <visualDescription h="60" w="100" x="79" y="447">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="true" uRef="environment_port_type">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="verify_client_port_type" direct="true" varName="C"/>
    <supplyParameter cRef="verify_server_port_type" direct="true" varName="S"/>
    <interface iRef="IMCRL2Impl" nArgs="0">
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.task.VerifyPortType;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerType;&#xA;using br.ufc.mdcc.hpc.shelf.certify.tactical.MCRL2;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerTypeSWC2;&#xA;&#xA;namespace br.ufc.mdcc.hpc.shelf.certify.tactical.impl.MCRL2Impl &#xA;{&#xA;&#x9;public abstract class BaseIMCRL2Impl: Computation, BaseIMCRL2&#xA;&#x9;{&#xA;&#x9;&#x9;private ITaskPort&lt;IVerifyPortType> verify = null;&#xA;&#xA;&#x9;&#x9;public ITaskPort&lt;IVerifyPortType> Verify&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.verify == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.verify = (ITaskPort&lt;IVerifyPortType>) Services.getPort(&quot;verify&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.verify;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IVerifyServerPort&lt;IVerifyDataPortServerTypeSWC2> verify_data = null;&#xA;&#xA;&#x9;&#x9;public IVerifyServerPort&lt;IVerifyDataPortServerTypeSWC2> Verify_data&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.verify_data == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.verify_data = (IVerifyServerPort&lt;IVerifyDataPortServerTypeSWC2>) Services.getPort(&quot;verify_data&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.verify_data;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#xA;&#xA;&#x9;}&#xA;}" name="BaseIMCRL2Impl.cs" srcType="base" uri="br.ufc.mdcc.hpc.shelf.certify.tactical.impl.MCRL2Impl/bin/1.0.0.0/BaseIMCRL2Impl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/bin/1.0.0.0/ITaskPort.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.task.VerifyPortType/bin/1.0.0.0/IVerifyPortType.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPort/bin/1.0.0.0/IVerifyServerPort.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerType/bin/1.0.0.0/IVerifyDataPortServerType.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.certify.tactical.MCRL2/bin/1.0.0.0/BaseITactical.dll</dependency>
          <externalDependency>MPI</externalDependency>
        </file>
        <file contents="using System;&#xA;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.shelf.certify.tactical.MCRL2;&#xA;using System.Diagnostics;&#xA;using System.IO;&#xA;using System.Threading;&#xA;using System.Collections.Concurrent;&#xA;using  br.ufc.mdcc.hpc.shelf.tactical.task.VerifyPortType;&#xA;using MPI;&#xA;using br.ufc.mdcc.hpc.shelf.tactical.environment.VerifyDataPortServerTypeSWC2;&#xA;&#xA;namespace br.ufc.mdcc.hpc.shelf.certify.tactical.impl.MCRL2Impl&#xA;{&#xA;&#x9;public class IMCRL2Impl : BaseIMCRL2Impl, IMCRL2&#x9;&#x9;&#xA;&#x9;{   &#xA;&#x9;&#x9;public bool status_verification_properties;&#xA;&#xA;&#x9;&#x9;IVerifyDataPortServerTypeSWC2Impl service = null;&#xA;&#x9;&#xA;&#x9;&#x9;public override void after_initialize ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this.service = new IVerifyDataPortServerTypeSWC2Impl (this.Rank, this.Size);&#xA;&#xA;&#x9;&#x9;&#x9;Verify_data.Server = service;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public override void main()&#xA;&#x9;&#x9;{   &#xA;&#x9;&#x9;&#x9;while (true) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;STARTING ITERATION MCRL2 - BEFORE VERIFY PERFORM&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Verify.invoke (IVerify.VERIFY_PERFORM);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;MCRL2 - AFTER VERIFY PERFORM&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//Thread.Sleep (10000);&#xA;&#x9;&#x9;&#x9;&#x9;service.invoke_verify_perform ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;MCRL2 - invoke_verify_perform&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (service.Conclusive) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;status_verification_properties = this.Communicator.Allreduce (false, Operation&lt;Boolean>.LogicalAnd);&#xA;&#x9;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;status_verification_properties = this.Communicator.Allreduce (true, Operation&lt;Boolean>.LogicalAnd);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;MCRL2 - After ALL REDUCE &quot; + service.Conclusive);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (status_verification_properties)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Verify.invoke (IVerify.VERIFY_CONCLUSIVE);&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Verify.invoke (IVerify.VERIFY_INCONCLUSIVE);&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;MCRL2 - END ITERATION &quot; + status_verification_properties);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;internal class IVerifyDataPortServerTypeSWC2Impl : IVerifyDataPortServerTypeSWC2&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;public int num_threads = 1;&#xA;&#x9;&#x9;&#x9;public int [] num_properties_thread;&#xA;&#x9;&#x9;&#x9;public int[] properties_status;&#xA;&#x9;&#x9;&#x9;public int num_properties;&#xA;&#x9;&#x9;&#x9;public int number_thread = 0;&#xA;&#x9;&#x9;&#x9;public string []property_files; &#xA;&#x9;&#x9;&#x9;public string mCRL2_file; &#xA;&#x9;&#x9;&#x9;public int index_my_first_prop;&#xA;&#x9;&#x9;&#x9;public string work_path;&#xA;&#x9;&#x9;&#x9;public int number_units_tactical;&#xA;&#x9;&#x9;&#x9;public int number_prop_consumed=0;&#xA;&#x9;&#x9;&#x9;public bool verification_is_inconclusive = false;&#xA;&#xA;&#x9;&#x9;&#x9;int Rank;&#xA;&#x9;&#x9;&#x9;int Size;&#xA;&#xA;&#x9;&#x9;&#x9;public bool Conclusive { get { return verification_is_inconclusive; } }&#xA;&#xA;&#x9;&#x9;&#x9;public IVerifyDataPortServerTypeSWC2Impl(int rank, int size)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;this.Rank = rank;&#xA;&#x9;&#x9;&#x9;&#x9;this.Size = size;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;public void setMcrl2File(string filename)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (Rank + &quot;: ENTER IVerifyDataPortServerTypeSWC2Impl - setMcrl2File&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;mCRL2_file = filename;&#xA;&#x9;&#x9;&#x9;&#x9;work_path = System.Environment.GetEnvironmentVariable (&quot;PATH_TAC_MCRL2_EXEC&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;if (work_path == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;work_path = System.Environment.GetEnvironmentVariable (&quot;HOME&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;WORK PATH OF TACTICAL is &quot; + work_path);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;File.WriteAllText (work_path + Path.DirectorySeparatorChar +&quot;workflow.mcrl2&quot;, mCRL2_file);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (Rank + &quot;: EXIT IVerifyDataPortServerTypeSWC2Impl - setMcrl2File&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;public void setNumProperties(int number)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (Rank + &quot;: ENTER IVerifyDataPortServerTypeSWC2Impl - setNumProperties *** num_properties = {0}&quot;, num_properties);&#xA;&#x9;&#x9;&#x9;&#x9;this.num_properties = number;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (Rank + &quot;: EXIT IVerifyDataPortServerTypeSWC2Impl - setNumProperties&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;public void setIndexMyFirstProp(int index)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (Rank + &quot;: ENTER IVerifyDataPortServerTypeSWC2Impl - setIndexMyFirstProp&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;index_my_first_prop = index;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;number_units_tactical = this.Size - 1;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;rank tactical &quot; + this.Rank + &quot; num prop:&quot; + num_properties);&#xA;&#x9;&#x9;&#x9;&#x9;property_files = new string[num_properties];&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (Rank + &quot;: EXIT IVerifyDataPortServerTypeSWC2Impl - setIndexMyFirstProp&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;public void setPropertyFiles(string [] files)&#xA;&#x9;&#x9;&#x9;{&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (Rank + &quot;: ENTER IVerifyDataPortServerTypeSWC2Impl - setPropertyFiles&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;property_files = files;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;int index_property;&#xA;&#x9;&#x9;&#x9;&#x9;for (int i = 0; i &lt; num_properties; i++) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;index_property = index_my_first_prop + i;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;File.WriteAllText (work_path + Path.DirectorySeparatorChar + &quot;property&quot; + index_property + &quot;.mcf&quot;, property_files [i]);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (Rank + &quot; &quot; + &quot;property&quot; + index_property + &quot;.mcf&quot; + &quot; --- &quot; + property_files [i]);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;properties_status = new int[num_properties];&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (Rank + &quot;: EXIT IVerifyDataPortServerTypeSWC2Impl - setPropertyFiles&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;public void invoke_verify_perform()&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (Rank + &quot;: ENTER IVerifyDataPortServerTypeSWC2Impl - invoke_verify_perform&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;if (num_threads > 1) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;num_properties_thread = new int[num_threads];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Thread[] threadv = new Thread[num_threads];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int offset = (int)Math.Ceiling ((double)num_properties / num_threads);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;Rank ThreadOffset number_properties_unit &quot; + this.Rank + &quot; &quot; + offset + &quot; &quot; + num_properties);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//assumo que cada n&#xf3; de processamento possui 2 n&#xfa;cleos&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// &quot;gnome-terminal -x bash -ic 'cd $HOME; ls; bash'&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int num_properties_aux = num_properties;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//string command = &quot;run.sh&quot; + mCRL2_file;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (int i = 0; i &lt; num_threads; i++) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (num_properties_aux > offset) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;num_properties_thread [i] = offset;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;num_properties_aux -= offset;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;num_properties_thread [i] = num_properties_aux;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;num_properties_aux = 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;threadv [i] = new Thread ((ThreadStart)delegate() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;int my_number_thread;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;int prop;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;lock (this) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;my_number_thread = number_thread;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;number_thread++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;prop = number_prop_consumed;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;number_prop_consumed += num_properties_thread [my_number_thread];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;int index_property;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;TACTICAL MCRL2 - CREATING THREAD: &quot; + my_number_thread + &quot; from &quot; + this.Rank + &quot; num properties &quot; + num_properties + &quot; num properties thread &quot; + num_properties_thread [my_number_thread]);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for (int j = 0; j &lt; num_properties_thread [my_number_thread]; j++) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;index_property = index_my_first_prop + prop + j;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;Thread &quot; + my_number_thread + &quot; from &quot; + this.Rank + &quot; dealing with property &quot; + &quot;property&quot; + index_property + &quot;.mcf&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TacticalAdaptermCRL2 t = new TacticalAdaptermCRL2 (work_path, &quot;workflow.mcrl2&quot;, &quot;property&quot; + index_property + &quot;.mcf&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;int result = t.run ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;Thread&quot; + my_number_thread + &quot; de &quot; + this.Rank + &quot;:Result of verification of property &quot; + &quot;property&quot; + index_property + &quot;.mcf&quot; + &quot;: &quot; + result + &quot; storing status for &quot; + (prop + j));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;properties_status [prop + j] = result;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (result == -1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;verification_is_inconclusive = true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;});&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;threadv [i].Start ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (int i = 0; i &lt; num_threads; i++) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;TACTICAL MCRL2 - waiting threads : &quot; + i + &quot; from &quot; + this.Rank);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;threadv [i].Join ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: num_properties = {0}&quot;, num_properties);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (int j = 0; j &lt; num_properties; j++) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot; dealing with property &quot; + &quot;property&quot; + (index_my_first_prop + j) + &quot;.mcf&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TacticalAdaptermCRL2 t = new TacticalAdaptermCRL2 (work_path, &quot;workflow.mcrl2&quot;, &quot;property&quot; + (index_my_first_prop + j) + &quot;.mcf&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;int result = t.run ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;:Resultado da verifica&#xe7;&#xe3;o da propriedade &quot; + &quot;property&quot; + (index_my_first_prop + j) + &quot;.mcf&quot; + &quot;: &quot; + result + &quot; storing status for &quot; + j);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;properties_status [j] = result;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (result == -1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;verification_is_inconclusive = true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (Rank + &quot;: EXIT IVerifyDataPortServerTypeSWC2Impl - invoke_verify_perform&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public void sendStatusVerification()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;Rank &quot; + this.Rank + &quot; sending status verification to certifier &quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;class TacticalAdaptermCRL2&#xA;&#x9;{  &#xA;&#x9;&#x9;string mCRL2_file; string property_file; //int result;&#xA;&#x9;&#x9;string work_path;&#xA;&#xA;&#x9;&#x9;public TacticalAdaptermCRL2 (string work_path, string mCRL2_file, string property_file)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this.mCRL2_file = mCRL2_file;&#xA;&#x9;&#x9;&#x9;this.property_file = property_file;&#xA;&#x9;&#x9;&#x9;this.work_path = work_path;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public int run()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;BEGIN TACTICAL ADAPTER&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;Process proc = new System.Diagnostics.Process ();&#xA;&#x9;&#x9;&#x9;proc.StartInfo.FileName = &quot;/bin/bash&quot;;&#xA;&#x9;&#x9;&#x9;//proc.StartInfo.WorkingDirectory = &quot;/home/00292431309/Dropbox/HPC-Shelf-MapReduce-master/br.ufc.mdcc.hpcshelf.mapreduce.impl.computation.ReducerImpl/src/1.0.0.0&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;proc.StartInfo.Arguments = work_path + Path.DirectorySeparatorChar + &quot;run.sh &quot; + work_path + Path.DirectorySeparatorChar + mCRL2_file + &quot; &quot; + work_path + Path.DirectorySeparatorChar + property_file;&#xA;&#x9;&#x9;&#x9;proc.StartInfo.UseShellExecute = false; &#xA;&#x9;&#x9;&#x9;proc.StartInfo.RedirectStandardOutput = true;&#xA;&#x9;&#x9;&#x9;proc.StartInfo.RedirectStandardError = true;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;TACTICAL ADAPTER - BEFORE START&quot;);&#xA;&#x9;&#x9;&#x9;proc.Start ();&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;TACTICAL ADAPTER - AFTER START&quot;);&#xA;&#x9;&#x9;&#x9;string output;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;while (!proc.StandardOutput.EndOfStream) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;output = proc.StandardOutput.ReadLine ();&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;Sa&#xed;da padr&#xe3;o - Adaptador T&#xe1;tico mCRL2 para prop &quot; + property_file +&quot; &quot; + output);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (output == &quot;true&quot;)      return 1;&#xA;&#x9;&#x9;&#x9;&#x9;else if(output == &quot;false&quot;) return 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;END TACTICAL ADAPTER&quot;);&#xA;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;}&#xA;" name="IMCRL2Impl.cs" srcType="user" uri="br.ufc.mdcc.hpc.shelf.certify.tactical.impl.MCRL2Impl/bin/1.0.0.0/IMCRL2Impl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpc.shelf.certify.tactical.impl.MCRL2Impl/bin/1.0.0.0/BaseIMCRL2Impl.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.shelf.certify.tactical.MCRL2/bin/1.0.0.0/ITactical.dll</dependency>
          <externalDependency>MPI</externalDependency>
        </file>
      </sources>
      <visualDescription h="40" w="80" x="144" y="50">
        <color b="0" g="255" r="255"/>
      </visualDescription>
      <externalReferences>MPI</externalReferences>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <unit facet="0" iRef="IMCRL2Impl" multiple="true" private="false" replica="0" uRef="tactical" visibleInterface="true">
      <super cRef="base" uRef="tactical"/>
      <visualDescription h="40" w="80" x="48" y="127"/>
    </unit>
  </componentInfo>
</component:component>